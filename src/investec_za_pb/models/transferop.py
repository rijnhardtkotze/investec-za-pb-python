"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from investec_za_pb.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TransferListTypedDict(TypedDict):
    beneficiary_account_id: str
    amount: str
    my_reference: str
    their_reference: str


class TransferList(BaseModel):
    beneficiary_account_id: Annotated[str, pydantic.Field(alias="beneficiaryAccountId")]

    amount: str

    my_reference: Annotated[str, pydantic.Field(alias="myReference")]

    their_reference: Annotated[str, pydantic.Field(alias="theirReference")]


class TransferRequestBodyTypedDict(TypedDict):
    account_id: str
    transfer_list: NotRequired[List[TransferListTypedDict]]


class TransferRequestBody(BaseModel):
    account_id: Annotated[str, pydantic.Field(alias="accountId")]

    transfer_list: Annotated[
        Optional[List[TransferList]], pydantic.Field(alias="transferList")
    ] = None


class TransferTransferResponsesTypedDict(TypedDict):
    payment_reference_number: NotRequired[str]
    r"""Internal transfer reference number"""
    payment_date: NotRequired[str]
    r"""Transfer date"""
    status: NotRequired[str]
    r"""Transfer outcome status"""
    beneficiary_name: NotRequired[str]
    r"""Transfer reference used"""
    beneficiary_account_id: NotRequired[str]
    r"""Account ID of the destination account"""
    authorisation_required: NotRequired[bool]
    r"""Boolean value describing if authorisation is required"""


class TransferTransferResponses(BaseModel):
    payment_reference_number: Annotated[
        Optional[str], pydantic.Field(alias="PaymentReferenceNumber")
    ] = None
    r"""Internal transfer reference number"""

    payment_date: Annotated[Optional[str], pydantic.Field(alias="PaymentDate")] = None
    r"""Transfer date"""

    status: Annotated[Optional[str], pydantic.Field(alias="Status")] = None
    r"""Transfer outcome status"""

    beneficiary_name: Annotated[
        Optional[str], pydantic.Field(alias="BeneficiaryName")
    ] = None
    r"""Transfer reference used"""

    beneficiary_account_id: Annotated[
        Optional[str], pydantic.Field(alias="BeneficiaryAccountId")
    ] = None
    r"""Account ID of the destination account"""

    authorisation_required: Annotated[
        Optional[bool], pydantic.Field(alias="AuthorisationRequired")
    ] = None
    r"""Boolean value describing if authorisation is required"""


class TransferResponseTypedDict(TypedDict):
    transfer_responses: NotRequired[List[TransferTransferResponsesTypedDict]]
    error_message: NotRequired[Nullable[str]]


class TransferResponse(BaseModel):
    transfer_responses: Annotated[
        Optional[List[TransferTransferResponses]],
        pydantic.Field(alias="TransferResponses"),
    ] = None

    error_message: Annotated[
        OptionalNullable[str], pydantic.Field(alias="ErrorMessage")
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["TransferResponses", "ErrorMessage"]
        nullable_fields = ["ErrorMessage"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TransferDataTypedDict(TypedDict):
    r"""Set of elements used to define the transfer status details."""

    transfer_response: NotRequired[TransferResponseTypedDict]


class TransferData(BaseModel):
    r"""Set of elements used to define the transfer status details."""

    transfer_response: Annotated[
        Optional[TransferResponse], pydantic.Field(alias="transferResponse")
    ] = None


class TransferMetaTypedDict(TypedDict):
    r"""Meta Data relevant to the payload"""

    total_pages: NotRequired[int]


class TransferMeta(BaseModel):
    r"""Meta Data relevant to the payload"""

    total_pages: Annotated[Optional[int], pydantic.Field(alias="totalPages")] = None


class TransferLinksTypedDict(TypedDict):
    r"""Links relevant to the payload"""

    self_: str


class TransferLinks(BaseModel):
    r"""Links relevant to the payload"""

    self_: Annotated[str, pydantic.Field(alias="self")]


class TransferResponseBodyTypedDict(TypedDict):
    r"""Resource has been retrieved"""

    data: TransferDataTypedDict
    r"""Set of elements used to define the transfer status details."""
    meta: TransferMetaTypedDict
    r"""Meta Data relevant to the payload"""
    links: TransferLinksTypedDict
    r"""Links relevant to the payload"""


class TransferResponseBody(BaseModel):
    r"""Resource has been retrieved"""

    data: TransferData
    r"""Set of elements used to define the transfer status details."""

    meta: TransferMeta
    r"""Meta Data relevant to the payload"""

    links: TransferLinks
    r"""Links relevant to the payload"""
