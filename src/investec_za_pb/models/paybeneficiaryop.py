"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from investec_za_pb.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from investec_za_pb.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PaymentListTypedDict(TypedDict):
    beneficiary_id: str
    amount: str
    my_reference: str
    their_reference: str
    authoriser_a_id: NotRequired[str]
    r"""If the payment requires authorisation this is derived from profiles/{profileid}/accounts/{accountId}/authorisationsetupdetails."""
    authoriser_b_id: NotRequired[str]
    r"""If the payment requires authorisation this is derived from profiles/{profileid}/accounts/{accountId}/authorisationsetupdetails."""
    auth_period_id: NotRequired[str]
    r"""If the payment requires authorisation this is derived from profiles/{profileid}/accounts/{accountId}/authorisationsetupdetails."""
    faster_payment: NotRequired[bool]
    r"""If the payment requires authorisation this can be set to true if the beneficiary allows it from profiles/{profileid}/beneficiaries/{accountid}."""


class PaymentList(BaseModel):
    beneficiary_id: Annotated[str, pydantic.Field(alias="beneficiaryId")]

    amount: str

    my_reference: Annotated[str, pydantic.Field(alias="myReference")]

    their_reference: Annotated[str, pydantic.Field(alias="theirReference")]

    authoriser_a_id: Annotated[Optional[str], pydantic.Field(alias="authoriserAId")] = (
        None
    )
    r"""If the payment requires authorisation this is derived from profiles/{profileid}/accounts/{accountId}/authorisationsetupdetails."""

    authoriser_b_id: Annotated[Optional[str], pydantic.Field(alias="authoriserBId")] = (
        None
    )
    r"""If the payment requires authorisation this is derived from profiles/{profileid}/accounts/{accountId}/authorisationsetupdetails."""

    auth_period_id: Annotated[Optional[str], pydantic.Field(alias="authPeriodId")] = (
        None
    )
    r"""If the payment requires authorisation this is derived from profiles/{profileid}/accounts/{accountId}/authorisationsetupdetails."""

    faster_payment: Annotated[Optional[bool], pydantic.Field(alias="fasterPayment")] = (
        None
    )
    r"""If the payment requires authorisation this can be set to true if the beneficiary allows it from profiles/{profileid}/beneficiaries/{accountid}."""


class PayBeneficiaryRequestBodyTypedDict(TypedDict):
    payment_list: NotRequired[List[PaymentListTypedDict]]


class PayBeneficiaryRequestBody(BaseModel):
    payment_list: Annotated[
        Optional[List[PaymentList]], pydantic.Field(alias="paymentList")
    ] = None


class PayBeneficiaryRequestTypedDict(TypedDict):
    account_id: str
    request_body: PayBeneficiaryRequestBodyTypedDict


class PayBeneficiaryRequest(BaseModel):
    account_id: Annotated[
        str,
        pydantic.Field(alias="accountId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    request_body: Annotated[
        PayBeneficiaryRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]


class PayBeneficiaryTransferResponsesTypedDict(TypedDict):
    payment_reference_number: NotRequired[str]
    r"""Internal transfer reference number"""
    payment_date: NotRequired[str]
    r"""Transfer date"""
    status: NotRequired[str]
    r"""Transfer outcome status"""
    beneficiary_name: NotRequired[str]
    r"""Transfer reference used"""
    beneficiary_account_id: NotRequired[str]
    r"""Account ID of the destination account"""
    authorisation_required: NotRequired[bool]
    r"""Boolean value describing if authorisation is required"""


class PayBeneficiaryTransferResponses(BaseModel):
    payment_reference_number: Annotated[
        Optional[str], pydantic.Field(alias="PaymentReferenceNumber")
    ] = None
    r"""Internal transfer reference number"""

    payment_date: Annotated[Optional[str], pydantic.Field(alias="PaymentDate")] = None
    r"""Transfer date"""

    status: Annotated[Optional[str], pydantic.Field(alias="Status")] = None
    r"""Transfer outcome status"""

    beneficiary_name: Annotated[
        Optional[str], pydantic.Field(alias="BeneficiaryName")
    ] = None
    r"""Transfer reference used"""

    beneficiary_account_id: Annotated[
        Optional[str], pydantic.Field(alias="BeneficiaryAccountId")
    ] = None
    r"""Account ID of the destination account"""

    authorisation_required: Annotated[
        Optional[bool], pydantic.Field(alias="AuthorisationRequired")
    ] = None
    r"""Boolean value describing if authorisation is required"""


class PayBeneficiaryDataTypedDict(TypedDict):
    r"""Set of elements used to define the transfer status details."""

    transfer_responses: NotRequired[List[PayBeneficiaryTransferResponsesTypedDict]]
    error_message: NotRequired[Nullable[str]]


class PayBeneficiaryData(BaseModel):
    r"""Set of elements used to define the transfer status details."""

    transfer_responses: Annotated[
        Optional[List[PayBeneficiaryTransferResponses]],
        pydantic.Field(alias="TransferResponses"),
    ] = None

    error_message: Annotated[
        OptionalNullable[str], pydantic.Field(alias="ErrorMessage")
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["TransferResponses", "ErrorMessage"]
        nullable_fields = ["ErrorMessage"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PayBeneficiaryMetaTypedDict(TypedDict):
    r"""Meta Data relevant to the payload"""

    total_pages: NotRequired[int]


class PayBeneficiaryMeta(BaseModel):
    r"""Meta Data relevant to the payload"""

    total_pages: Annotated[Optional[int], pydantic.Field(alias="totalPages")] = None


class PayBeneficiaryLinksTypedDict(TypedDict):
    r"""Links relevant to the payload"""

    self_: str


class PayBeneficiaryLinks(BaseModel):
    r"""Links relevant to the payload"""

    self_: Annotated[str, pydantic.Field(alias="self")]


class PayBeneficiaryResponseBodyTypedDict(TypedDict):
    r"""Resource has been retrieved"""

    data: PayBeneficiaryDataTypedDict
    r"""Set of elements used to define the transfer status details."""
    meta: PayBeneficiaryMetaTypedDict
    r"""Meta Data relevant to the payload"""
    links: PayBeneficiaryLinksTypedDict
    r"""Links relevant to the payload"""


class PayBeneficiaryResponseBody(BaseModel):
    r"""Resource has been retrieved"""

    data: PayBeneficiaryData
    r"""Set of elements used to define the transfer status details."""

    meta: PayBeneficiaryMeta
    r"""Meta Data relevant to the payload"""

    links: PayBeneficiaryLinks
    r"""Links relevant to the payload"""
