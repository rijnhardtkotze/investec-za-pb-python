"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from investec_za_pb.types import BaseModel
from investec_za_pb.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ProfileaccountsRequestTypedDict(TypedDict):
    profileid: str


class ProfileaccountsRequest(BaseModel):
    profileid: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]


class ProfileaccountsDataTypedDict(TypedDict):
    account_id: str
    r"""A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner."""
    account_number: str
    r"""A unique and immutable identifier used to identify the account resource. This identifier is what is commonly known to the owner."""
    account_name: str
    r"""The nickname of the account, a means of identification of the account."""
    reference_name: str
    r"""The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account."""
    product_name: str
    r"""Identifies the product of the account."""
    kyc_compliant: bool
    r"""Identifies if the account is KYC compliant."""
    profile_id: str
    r"""A unique and immutable identifier used to identify the account profile. This identifier has no meaning to the account owner. This is used to filter the beneficiary list"""
    profile_name: str
    r"""The nickname of the profile, assigned by the account owner in order to provide an additional means of identification of the profile."""


class ProfileaccountsData(BaseModel):
    account_id: Annotated[str, pydantic.Field(alias="accountId")]
    r"""A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner."""

    account_number: Annotated[str, pydantic.Field(alias="accountNumber")]
    r"""A unique and immutable identifier used to identify the account resource. This identifier is what is commonly known to the owner."""

    account_name: Annotated[str, pydantic.Field(alias="accountName")]
    r"""The nickname of the account, a means of identification of the account."""

    reference_name: Annotated[str, pydantic.Field(alias="referenceName")]
    r"""The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account."""

    product_name: Annotated[str, pydantic.Field(alias="productName")]
    r"""Identifies the product of the account."""

    kyc_compliant: Annotated[bool, pydantic.Field(alias="kycCompliant")]
    r"""Identifies if the account is KYC compliant."""

    profile_id: Annotated[str, pydantic.Field(alias="profileId")]
    r"""A unique and immutable identifier used to identify the account profile. This identifier has no meaning to the account owner. This is used to filter the beneficiary list"""

    profile_name: Annotated[str, pydantic.Field(alias="profileName")]
    r"""The nickname of the profile, assigned by the account owner in order to provide an additional means of identification of the profile."""


class ProfileaccountsLinksTypedDict(TypedDict):
    r"""Links relevant to the payload"""

    self_: str


class ProfileaccountsLinks(BaseModel):
    r"""Links relevant to the payload"""

    self_: Annotated[str, pydantic.Field(alias="self")]


class ProfileaccountsMetaTypedDict(TypedDict):
    r"""Meta Data relevant to the payload"""

    total_pages: NotRequired[int]


class ProfileaccountsMeta(BaseModel):
    r"""Meta Data relevant to the payload"""

    total_pages: Annotated[Optional[int], pydantic.Field(alias="totalPages")] = None


class ProfileaccountsResponseBodyTypedDict(TypedDict):
    r"""Resource has been retrieved"""

    data: List[ProfileaccountsDataTypedDict]
    links: ProfileaccountsLinksTypedDict
    r"""Links relevant to the payload"""
    meta: ProfileaccountsMetaTypedDict
    r"""Meta Data relevant to the payload"""


class ProfileaccountsResponseBody(BaseModel):
    r"""Resource has been retrieved"""

    data: List[ProfileaccountsData]

    links: ProfileaccountsLinks
    r"""Links relevant to the payload"""

    meta: ProfileaccountsMeta
    r"""Meta Data relevant to the payload"""
