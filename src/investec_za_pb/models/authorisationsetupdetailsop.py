"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from investec_za_pb.types import BaseModel
from investec_za_pb.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AuthorisationsetupdetailsRequestTypedDict(TypedDict):
    profileid: str
    accountid: str


class AuthorisationsetupdetailsRequest(BaseModel):
    profileid: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    accountid: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]


class PeriodTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Period ID."""
    name: NotRequired[str]
    r"""Period description for the amount of days the payment will be valid for until it expires if not approved."""


class Period(BaseModel):
    id: Optional[str] = None
    r"""Period ID."""

    name: Optional[str] = None
    r"""Period description for the amount of days the payment will be valid for until it expires if not approved."""


class AuthorisersListATypedDict(TypedDict):
    id: NotRequired[str]
    r"""Authoriser A ID used when doing payments requiring authorisations where numberOfAuthorisationRequired is 1."""
    name: NotRequired[str]
    r"""Authoriser A name."""


class AuthorisersListA(BaseModel):
    id: Optional[str] = None
    r"""Authoriser A ID used when doing payments requiring authorisations where numberOfAuthorisationRequired is 1."""

    name: Optional[str] = None
    r"""Authoriser A name."""


class AuthorisersListBTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Authoriser B ID used when doing payments requiring authorisations where numberOfAuthorisationRequired is 2."""
    name: NotRequired[str]
    r"""Authoriser B name."""


class AuthorisersListB(BaseModel):
    id: Optional[str] = None
    r"""Authoriser B ID used when doing payments requiring authorisations where numberOfAuthorisationRequired is 2."""

    name: Optional[str] = None
    r"""Authoriser B name."""


class AuthorisationsetupdetailsDataTypedDict(TypedDict):
    r"""Set of elements used to define the authorisation setup details for the profile and account combination."""

    number_of_authorisation_required: NotRequired[str]
    r"""The number of authorisors needed for a payment."""
    period: NotRequired[List[PeriodTypedDict]]
    authorisers_list_a: NotRequired[List[AuthorisersListATypedDict]]
    authorisers_list_b: NotRequired[List[AuthorisersListBTypedDict]]


class AuthorisationsetupdetailsData(BaseModel):
    r"""Set of elements used to define the authorisation setup details for the profile and account combination."""

    number_of_authorisation_required: Annotated[
        Optional[str], pydantic.Field(alias="numberOfAuthorisationRequired")
    ] = None
    r"""The number of authorisors needed for a payment."""

    period: Optional[List[Period]] = None

    authorisers_list_a: Annotated[
        Optional[List[AuthorisersListA]], pydantic.Field(alias="authorisersListA")
    ] = None

    authorisers_list_b: Annotated[
        Optional[List[AuthorisersListB]], pydantic.Field(alias="authorisersListB")
    ] = None


class AuthorisationsetupdetailsMetaTypedDict(TypedDict):
    r"""Meta Data relevant to the payload"""

    total_pages: NotRequired[int]


class AuthorisationsetupdetailsMeta(BaseModel):
    r"""Meta Data relevant to the payload"""

    total_pages: Annotated[Optional[int], pydantic.Field(alias="totalPages")] = None


class AuthorisationsetupdetailsLinksTypedDict(TypedDict):
    r"""Links relevant to the payload"""

    self_: str


class AuthorisationsetupdetailsLinks(BaseModel):
    r"""Links relevant to the payload"""

    self_: Annotated[str, pydantic.Field(alias="self")]


class AuthorisationsetupdetailsResponseBodyTypedDict(TypedDict):
    r"""Resource has been retrieved"""

    data: AuthorisationsetupdetailsDataTypedDict
    r"""Set of elements used to define the authorisation setup details for the profile and account combination."""
    meta: AuthorisationsetupdetailsMetaTypedDict
    r"""Meta Data relevant to the payload"""
    links: AuthorisationsetupdetailsLinksTypedDict
    r"""Links relevant to the payload"""


class AuthorisationsetupdetailsResponseBody(BaseModel):
    r"""Resource has been retrieved"""

    data: AuthorisationsetupdetailsData
    r"""Set of elements used to define the authorisation setup details for the profile and account combination."""

    meta: AuthorisationsetupdetailsMeta
    r"""Meta Data relevant to the payload"""

    links: AuthorisationsetupdetailsLinks
    r"""Links relevant to the payload"""
