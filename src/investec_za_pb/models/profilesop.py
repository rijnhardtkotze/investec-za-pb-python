"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from investec_za_pb.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ProfilesDataTypedDict(TypedDict):
    profile_id: NotRequired[str]
    r"""A unique and immutable identifier used to identify the profile resource. This identifier has no meaning to the account owner."""
    profile_name: NotRequired[str]
    r"""The nickname of the profile, assigned by the account owner in order to provide an additional means of identification of the profile."""
    default_profile: NotRequired[bool]
    r"""Value describing if the profile is the default for the user."""


class ProfilesData(BaseModel):
    profile_id: Annotated[Optional[str], pydantic.Field(alias="profileId")] = None
    r"""A unique and immutable identifier used to identify the profile resource. This identifier has no meaning to the account owner."""

    profile_name: Annotated[Optional[str], pydantic.Field(alias="profileName")] = None
    r"""The nickname of the profile, assigned by the account owner in order to provide an additional means of identification of the profile."""

    default_profile: Annotated[
        Optional[bool], pydantic.Field(alias="defaultProfile")
    ] = None
    r"""Value describing if the profile is the default for the user."""


class ProfilesMetaTypedDict(TypedDict):
    r"""Meta Data relevant to the payload"""

    total_pages: NotRequired[int]


class ProfilesMeta(BaseModel):
    r"""Meta Data relevant to the payload"""

    total_pages: Annotated[Optional[int], pydantic.Field(alias="totalPages")] = None


class ProfilesLinksTypedDict(TypedDict):
    r"""Links relevant to the payload"""

    self_: str


class ProfilesLinks(BaseModel):
    r"""Links relevant to the payload"""

    self_: Annotated[str, pydantic.Field(alias="self")]


class ProfilesResponseBodyTypedDict(TypedDict):
    r"""Resource has been retrieved"""

    data: List[ProfilesDataTypedDict]
    r"""Set of elements used to define the profiles."""
    meta: ProfilesMetaTypedDict
    r"""Meta Data relevant to the payload"""
    links: ProfilesLinksTypedDict
    r"""Links relevant to the payload"""


class ProfilesResponseBody(BaseModel):
    r"""Resource has been retrieved"""

    data: List[ProfilesData]
    r"""Set of elements used to define the profiles."""

    meta: ProfilesMeta
    r"""Meta Data relevant to the payload"""

    links: ProfilesLinks
    r"""Links relevant to the payload"""
