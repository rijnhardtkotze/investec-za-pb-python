"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from investec_za_pb.types import BaseModel
from investec_za_pb.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ProfilebenefiariesRequestTypedDict(TypedDict):
    profileid: str
    accountid: str


class ProfilebenefiariesRequest(BaseModel):
    profileid: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    accountid: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]


class ProfilebenefiariesDataTypedDict(TypedDict):
    beneficiary_id: NotRequired[str]
    r"""A unique and immutable identifier used to identify the beneficiary resource. This identifier has no meaning to the account owner."""
    account_number: NotRequired[str]
    r"""The beneficiary bank account number."""
    code: NotRequired[str]
    r"""The beneficiary bank code."""
    bank: NotRequired[str]
    r"""The beneficiary bank name."""
    beneficiary_name: NotRequired[str]
    r"""Beneficiary name."""
    last_payment_amount: NotRequired[str]
    r"""Last payment amount made to the beneficiary."""
    last_payment_date: NotRequired[str]
    r"""Last payment date to the beneficiary."""
    cell_no: NotRequired[str]
    r"""Notification cell no."""
    email_address: NotRequired[str]
    r"""Notification email address."""
    name: NotRequired[str]
    r"""Beneficiary name."""
    reference_account_number: NotRequired[str]
    r"""Reference account number."""
    reference_name: NotRequired[str]
    r"""Reference name."""
    category_id: NotRequired[str]
    r"""Beneficiary category id."""
    profile_id: NotRequired[str]
    r"""Profile id."""
    faster_payment_allowed: NotRequired[bool]
    r"""Faster Payment Allowed."""


class ProfilebenefiariesData(BaseModel):
    beneficiary_id: Annotated[Optional[str], pydantic.Field(alias="beneficiaryId")] = (
        None
    )
    r"""A unique and immutable identifier used to identify the beneficiary resource. This identifier has no meaning to the account owner."""

    account_number: Annotated[Optional[str], pydantic.Field(alias="accountNumber")] = (
        None
    )
    r"""The beneficiary bank account number."""

    code: Optional[str] = None
    r"""The beneficiary bank code."""

    bank: Optional[str] = None
    r"""The beneficiary bank name."""

    beneficiary_name: Annotated[
        Optional[str], pydantic.Field(alias="beneficiaryName")
    ] = None
    r"""Beneficiary name."""

    last_payment_amount: Annotated[
        Optional[str], pydantic.Field(alias="lastPaymentAmount")
    ] = None
    r"""Last payment amount made to the beneficiary."""

    last_payment_date: Annotated[
        Optional[str], pydantic.Field(alias="lastPaymentDate")
    ] = None
    r"""Last payment date to the beneficiary."""

    cell_no: Annotated[Optional[str], pydantic.Field(alias="cellNo")] = None
    r"""Notification cell no."""

    email_address: Annotated[Optional[str], pydantic.Field(alias="emailAddress")] = None
    r"""Notification email address."""

    name: Optional[str] = None
    r"""Beneficiary name."""

    reference_account_number: Annotated[
        Optional[str], pydantic.Field(alias="referenceAccountNumber")
    ] = None
    r"""Reference account number."""

    reference_name: Annotated[Optional[str], pydantic.Field(alias="referenceName")] = (
        None
    )
    r"""Reference name."""

    category_id: Annotated[Optional[str], pydantic.Field(alias="categoryId")] = None
    r"""Beneficiary category id."""

    profile_id: Annotated[Optional[str], pydantic.Field(alias="profileId")] = None
    r"""Profile id."""

    faster_payment_allowed: Annotated[
        Optional[bool], pydantic.Field(alias="fasterPaymentAllowed")
    ] = None
    r"""Faster Payment Allowed."""


class ProfilebenefiariesMetaTypedDict(TypedDict):
    r"""Meta Data relevant to the payload"""

    total_pages: NotRequired[int]


class ProfilebenefiariesMeta(BaseModel):
    r"""Meta Data relevant to the payload"""

    total_pages: Annotated[Optional[int], pydantic.Field(alias="totalPages")] = None


class ProfilebenefiariesLinksTypedDict(TypedDict):
    r"""Links relevant to the payload"""

    self_: str


class ProfilebenefiariesLinks(BaseModel):
    r"""Links relevant to the payload"""

    self_: Annotated[str, pydantic.Field(alias="self")]


class ProfilebenefiariesResponseBodyTypedDict(TypedDict):
    r"""Resource has been retrieved"""

    data: List[ProfilebenefiariesDataTypedDict]
    r"""Set of elements used to define the beneficiaries details."""
    meta: ProfilebenefiariesMetaTypedDict
    r"""Meta Data relevant to the payload"""
    links: ProfilebenefiariesLinksTypedDict
    r"""Links relevant to the payload"""


class ProfilebenefiariesResponseBody(BaseModel):
    r"""Resource has been retrieved"""

    data: List[ProfilebenefiariesData]
    r"""Set of elements used to define the beneficiaries details."""

    meta: ProfilebenefiariesMeta
    r"""Meta Data relevant to the payload"""

    links: ProfilebenefiariesLinks
    r"""Links relevant to the payload"""
