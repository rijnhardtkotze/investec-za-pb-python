"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from investec_za_pb.types import BaseModel
from investec_za_pb.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DocumentsRequestTypedDict(TypedDict):
    account_id: str
    r"""AccountId Id"""
    from_date: str
    r"""Refers to the date range filter's start date."""
    to_date: str
    r"""Refers to the date range filter's end date."""


class DocumentsRequest(BaseModel):
    account_id: Annotated[
        str,
        pydantic.Field(alias="accountId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""AccountId Id"""

    from_date: Annotated[
        str,
        pydantic.Field(alias="fromDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Refers to the date range filter's start date."""

    to_date: Annotated[
        str,
        pydantic.Field(alias="toDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Refers to the date range filter's end date."""


class DocumentsDataTypedDict(TypedDict):
    document_type: NotRequired[str]
    r"""The type of documents available."""
    document_date: NotRequired[str]
    r"""The date of the documents."""


class DocumentsData(BaseModel):
    document_type: Annotated[Optional[str], pydantic.Field(alias="documentType")] = None
    r"""The type of documents available."""

    document_date: Annotated[Optional[str], pydantic.Field(alias="documentDate")] = None
    r"""The date of the documents."""


class DocumentsMetaTypedDict(TypedDict):
    r"""Meta Data relevant to the payload"""

    total_pages: NotRequired[int]


class DocumentsMeta(BaseModel):
    r"""Meta Data relevant to the payload"""

    total_pages: Annotated[Optional[int], pydantic.Field(alias="totalPages")] = None


class DocumentsLinksTypedDict(TypedDict):
    r"""Links relevant to the payload"""

    self_: str


class DocumentsLinks(BaseModel):
    r"""Links relevant to the payload"""

    self_: Annotated[str, pydantic.Field(alias="self")]


class DocumentsResponseBodyTypedDict(TypedDict):
    r"""Resource has been retrieved"""

    data: List[DocumentsDataTypedDict]
    r"""Set of elements used to define the documents."""
    meta: DocumentsMetaTypedDict
    r"""Meta Data relevant to the payload"""
    links: DocumentsLinksTypedDict
    r"""Links relevant to the payload"""


class DocumentsResponseBody(BaseModel):
    r"""Resource has been retrieved"""

    data: List[DocumentsData]
    r"""Set of elements used to define the documents."""

    meta: DocumentsMeta
    r"""Meta Data relevant to the payload"""

    links: DocumentsLinks
    r"""Links relevant to the payload"""
