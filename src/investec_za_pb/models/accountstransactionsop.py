"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from investec_za_pb.types import BaseModel
from investec_za_pb.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AccountsTransactionsRequestTypedDict(TypedDict):
    account_id: str
    from_date: NotRequired[str]
    r"""Refers to the date range filter's start date. Will default to today's date, minus 180 days, if not specified."""
    to_date: NotRequired[str]
    r"""Refers to the date range filter's end date. Will default to today's date if not specified."""
    transaction_type: NotRequired[str]
    r"""Refers to the transaction type filter's value."""
    include_pending: NotRequired[bool]


class AccountsTransactionsRequest(BaseModel):
    account_id: Annotated[
        str,
        pydantic.Field(alias="accountId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    from_date: Annotated[
        Optional[str],
        pydantic.Field(alias="fromDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Refers to the date range filter's start date. Will default to today's date, minus 180 days, if not specified."""

    to_date: Annotated[
        Optional[str],
        pydantic.Field(alias="toDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Refers to the date range filter's end date. Will default to today's date if not specified."""

    transaction_type: Annotated[
        Optional[str],
        pydantic.Field(alias="transactionType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Refers to the transaction type filter's value."""

    include_pending: Annotated[
        Optional[bool],
        pydantic.Field(alias="includePending"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class Type(str, Enum):
    CREDIT = "CREDIT"
    DEBIT = "DEBIT"


class Status(str, Enum):
    POSTED = "POSTED"
    PENDING = "PENDING"


class TransactionsTypedDict(TypedDict):
    account_id: NotRequired[str]
    r"""A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner."""
    type: NotRequired[Type]
    transaction_type: NotRequired[str]
    r"""Refers to the transaction type filter's value."""
    status: NotRequired[Status]
    description: NotRequired[str]
    r"""Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable."""
    card_number: NotRequired[str]
    r"""Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable."""
    posted_order: NotRequired[float]
    r"""Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable."""
    posting_date: NotRequired[datetime]
    r"""Date and time when a transaction entry is posted to an account on the account servicer's books.
    Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.
    All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """
    value_date: NotRequired[datetime]
    r"""Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
    Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
    For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.
    All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """
    action_date: NotRequired[datetime]
    r"""Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
    Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
    For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.
    All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """
    transaction_date: NotRequired[datetime]
    r"""Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
    Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
    For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.
    All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """
    amount: NotRequired[float]
    r"""A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."""
    running_balance: NotRequired[float]
    r"""A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."""


class Transactions(BaseModel):
    account_id: Annotated[Optional[str], pydantic.Field(alias="accountId")] = None
    r"""A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner."""

    type: Optional[Type] = None

    transaction_type: Annotated[
        Optional[str], pydantic.Field(alias="transactionType")
    ] = None
    r"""Refers to the transaction type filter's value."""

    status: Optional[Status] = None

    description: Optional[str] = None
    r"""Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable."""

    card_number: Annotated[Optional[str], pydantic.Field(alias="cardNumber")] = None
    r"""Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable."""

    posted_order: Annotated[Optional[float], pydantic.Field(alias="postedOrder")] = None
    r"""Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable."""

    posting_date: Annotated[Optional[datetime], pydantic.Field(alias="postingDate")] = (
        None
    )
    r"""Date and time when a transaction entry is posted to an account on the account servicer's books.
    Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.
    All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """

    value_date: Annotated[Optional[datetime], pydantic.Field(alias="valueDate")] = None
    r"""Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
    Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
    For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.
    All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """

    action_date: Annotated[Optional[datetime], pydantic.Field(alias="actionDate")] = (
        None
    )
    r"""Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
    Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
    For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.
    All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """

    transaction_date: Annotated[
        Optional[datetime], pydantic.Field(alias="transactionDate")
    ] = None
    r"""Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
    Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
    For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.
    All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """

    amount: Optional[float] = None
    r"""A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."""

    running_balance: Annotated[
        Optional[float], pydantic.Field(alias="runningBalance")
    ] = None
    r"""A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."""


class AccountsTransactionsDataTypedDict(TypedDict):
    transactions: NotRequired[List[TransactionsTypedDict]]


class AccountsTransactionsData(BaseModel):
    transactions: Optional[List[Transactions]] = None


class AccountsTransactionsLinksTypedDict(TypedDict):
    r"""Links relevant to the payload"""

    self_: str


class AccountsTransactionsLinks(BaseModel):
    r"""Links relevant to the payload"""

    self_: Annotated[str, pydantic.Field(alias="self")]


class AccountsTransactionsMetaTypedDict(TypedDict):
    r"""Meta Data relevant to the payload"""

    total_pages: NotRequired[int]


class AccountsTransactionsMeta(BaseModel):
    r"""Meta Data relevant to the payload"""

    total_pages: Annotated[Optional[int], pydantic.Field(alias="totalPages")] = None


class AccountsTransactionsResponseBodyTypedDict(TypedDict):
    r"""Resource has been retrieved"""

    data: AccountsTransactionsDataTypedDict
    links: AccountsTransactionsLinksTypedDict
    r"""Links relevant to the payload"""
    meta: AccountsTransactionsMetaTypedDict
    r"""Meta Data relevant to the payload"""


class AccountsTransactionsResponseBody(BaseModel):
    r"""Resource has been retrieved"""

    data: AccountsTransactionsData

    links: AccountsTransactionsLinks
    r"""Links relevant to the payload"""

    meta: AccountsTransactionsMeta
    r"""Meta Data relevant to the payload"""
